BINARY TREES
1. Binary Tree Preorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void helper(TreeNode* root, vector<int> &ans)
    {
        if(root==0)return;
        ans.push_back(root->val);
        helper(root->left,ans);
        helper(root->right,ans);
    }
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        helper(root,ans);
        return ans;        
    }
};

2. Binary Tree Postorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     void tree(TreeNode* root, vector<int> &res)
    {
        if(root==0)
        return;
        tree(root->left,res);
       tree(root->right,res);
       res.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        tree(root,res);
        return res;     
 
        
    }
};

3. Binary Tree Inorder Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*>st;
        
        TreeNode*node=root;
        vector<int>inorder;
        
        while(true)
        {
            if(node!=NULL)
            {
                st.push(node);
                node=node->left;
            } 
            else 
            {
                if(st.empty()==true)
                    break;
                node=st.top();
                st.pop();
                inorder.push_back(node->val);
                node=node->right;
            }
        } 
        return inorder;
    }
};

4. Same Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL)
            return true;
        if(p==NULL && q!=NULL)
            return false;
        if(p!=NULL && q==NULL)
            return false;
         bool left = isSameTree(p->left , q->left);
         bool val=p->val==q->val;
        bool right= isSameTree(p->right, q->right);
        
        if(left && right && val)

        return true;
    return false;
    }
};

5. Symmetric Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool checkSymmetry(TreeNode* l, TreeNode* r) {
        if(l == nullptr || r == nullptr)
            return l == r;
        
        if(l->val != r->val) return false;
        return checkSymmetry(l->left, r->right) && checkSymmetry(l->right, r->left);
    }
    
    bool isSymmetric(TreeNode* root) {
        if(root == nullptr) return true;
        return checkSymmetry(root->left, root->right);
    }
};

6. Maximum Depth of Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
            if(root==NULL)
            return 0;
        
        int left = 1 + maxDepth(root->left);
        int right = 1 + maxDepth(root->right);
        
        return max(left,right);
    

    }
};

7. Binary Tree Right Side View
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        solve(root,res,0);
        return res;
    }
    void solve(TreeNode* root,vector<int> &res,int level)
    {
        if(!root) return;
        if(res.size() == level) res.push_back(root->val);
        solve(root->right,res,level+1);
        solve(root->left,res,level+1);
    }
};

8. Sum of Left Leaves
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
         int help(TreeNode* root,bool flag){

        if(root==NULL){
            return 0;
        }
        int sum=0;
        if(root->left==NULL&&root->right==NULL&&flag){
            sum=sum+root->val;
        }
        int lsum=help(root->left,true);
        int rsum=help(root->right,false);
        return sum+lsum+rsum;
    }
    int sumOfLeftLeaves(TreeNode* root) {
        return help(root,false); 
    }
    
};
