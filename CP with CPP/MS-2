STACK
1. Stack Fundamentals
#include <bits/stdc++.h>
 using namespace std;
 
#define MAX 25
 
class Stack 
{
    int top;
 
public:
    int s[MAX]; 
 
    Stack() 
	{ top = -1; }
    bool push(int x);
    int pop();
    int peek();
    bool isEmpty();
};
 
bool Stack::push(int x)
{
    if (top >= (MAX - 1)) 
	{
        cout << "Stack Overflow";
        return false;
    }
    else 
	{
        s[++top] = x;
        cout << x << " pushed into stack\n";
        return true;
    }
}
 
int Stack::pop()
{
    if (top < 0) {
        cout << "Stack Underflow";
        return 0;
    }
    else {
        int x = s[top--];
        return x;
    }
}
int Stack::peek()
{
    if (top < 0) 
	{
        cout << "Stack is Empty";
        return 0;
    }
    else 
	{
        int x = s[top];
        return x;
    }
}
 
bool Stack::isEmpty()
{
    return (top < 0);
}
 

int main()
{
    class Stack s;
    s.push(100);
    s.push(200);
    s.push(300);
    cout << s.pop() << " Popped from stack\n";
   
    cout<<"Elements present in stack : ";
    while(!s.isEmpty())
    {
        cout<<s.peek()<<" ";
        s.pop();
    }
 
    return 0;
}

2. Min Stack
class MinStack {
    int stack[10000];
    int min[10000];
    int topPtr;
    int minPtr;
public:
    /** initialize your data structure here. */
    MinStack() {
        topPtr = -1;
        minPtr = -1;
    }
    
    void push(int x) {
        if(topPtr >= 10000)
            return;
        
        stack[++topPtr] = x;
        
        if(minPtr >= 0)
        {
            if(min[minPtr] > x)
                min[++minPtr] = x;
            else
            {
                min[minPtr+1] = min[minPtr];
                minPtr += 1;
            }
        }
        else
            min[++minPtr] = x;
                
    }
    
    void pop() {
        if(topPtr < 0)      //Underflow
            return;
        
        topPtr -= 1;
        minPtr -= 1;
    }
    
    int top() {        
        return stack[topPtr];
    }
    
    int getMin() {
        return min[minPtr];
    }
};

3. Valid Parentheses
class Solution {
public:
    bool isValid(string str) {
        stack <char> s;
        int len = str.length();
        
        for(int i=0;i<len;i++){
            if(str[i] == '(' || str[i] == '{' || str[i] == '[')
                s.push( str[i]);
            else if(str[i] == ')' || str[i] == '}' || str[i] == ']'){
                if( s.empty())
                    return false;
                else if( str[i] == ')' && s.top() != '(')
                    return false;
                else if( str[i] == '}' && s.top() != '{')
                    return false;
                else if( str[i] == ']' && s.top() != '[')
                    return false;
                else 
                    s.pop();
            }
        }
        if( s.empty())
            return true;
        else 
            return false;
    }
};

4. Daily Temperatures

class Solution {
    public:
    vector<int> dailyTemperatures(vector<int>& T){
        int n=T.size();
        vector<int> answer(n,0);
    if(n<=1)return answer;
        stack<int> warmer;
        for(int i=n-1;i>=0;i--){
             while(!warmer.empty()&&T[i]>=T[warmer.top()])
                 warmer.pop();
            if(!warmer.empty()) answer[i]=warmer.top()-i;
            warmer.push(i);
        }
        return answer;
        }
};

5. Evaluating Reverse nail polish
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int>s;
        for(int i=0;i<tokens.size();i++)
        {
            if(tokens[i]=="+")
            {
                int p=s.top();
                s.pop();
                int q=s.top();
                s.pop();
                s.push(p+q);
            }
            else if(tokens[i]=="-")
            {
                int p=s.top();
                s.pop();
                int q=s.top();
                s.pop();
                s.push(q-p);
            }
            else if(tokens[i]=="*")
            {
                int p=s.top();
                s.pop();
                int q=s.top();
                s.pop();
                s.push(p*q);
            }
            else if(tokens[i]=="/")
            {
                int p=s.top();
                s.pop();
                int q=s.top();
                s.pop();
                s.push(q/p);
            }
            else
            {
                s.push(stoi(tokens[i]));
            }
        }
        return s.top();
    }
};

QUEUE

1. Queue Fundamentals
#include <iostream>
using namespace std;

#define SIZE 25
int q[SIZE];
int front = -1;
int rear = -1;

bool isempty()
{
 if(front == -1 && rear == -1)
 return true;
 else
 return false;
}

void enqueue ( int value )
{
 if (rear == SIZE-1)
  cout<<"Queue is full \n";
 else
 {
  if( front == -1)
   front = 0;
  rear++;
  q[rear] = value;
 }
}

void dequeue ( )
{
 if( isempty() )
  cout<<"Queue is empty\n";
 else
 if( front == rear )
  front = rear = -1;
 else
  front++;
}

void showfront( )
{
 if( isempty())
  cout<<"Queue is empty\n";
 else
  cout<<"element at front is:"<<q[front]<<"\n";
}

void displayQueue()
{
 if(isempty())
  cout<<"Queue is empty\n";
 else
 {
  for( int i=front ; i<= rear ; i++)
   cout<<q[i]<<" ";
  cout<<"\n";
 }
}

int main()
{

 cout<<"Inserting elements in queue\n";
 enqueue(10);
 enqueue(20);
 enqueue(30);
 displayQueue();

 showfront();

 cout<<"Removing elements from queue\n";
 
 dequeue();
 displayQueue();

 return 0;
}

2. Stack using Queue
class MyStack {
public:
        queue<int> q1;
        queue<int> q2;
    MyStack() {
        
    }
    
    void push(int x) {
        while(q1.size()){
            q2.push(q1.front());
            q1.pop();
        }
        q1.push(x);
        while(q2.size()){
            q1.push(q2.front());
            q2.pop();
        }
    }
    
    int pop() {
        int top=q1.front();
        q1.pop();
        return top;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty() && q2.empty();
        
    }
};

3. Queue using Stack
class MyQueue {
public:
    stack<int>s1;
    stack<int>s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        if(s1.empty())
            s1.push(x);
        else
            s2.push(x);
    }
    
    int pop() {
        int p;
        p=s1.top();
        s1.pop();
        if(s1.empty()
          ){
            while(!s2.empty())
            {
                s1.push(s2.top());
              s2.pop();
            }  
        }
        return p;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        if(s1.empty()&&s2.empty())
            return true;
        else
            return false;
    }
};

4. Design Circular queue

class MyCircularQueue {
public:
  vector<int>v;
    int f;
    int r;
    MyCircularQueue(int k) {
        
        v = vector<int>(k);
        f = -1;
        r = -1;
    }
    
    bool enQueue(int value) {
        if(f == -1){
            v[0] = value;
            f = 0;
            r = 0;
            return true;
        }
        
        else{
            if((r+1)%v.size() != f){
                v[(r+1)%v.size()] = value;
                r = (r+1)%v.size();
                return true;
            }
            else
                return false;
        }
    }
    
    bool deQueue() {
        
        if(f == -1)
            return false;
        
        if(f == r)
        {
            f = -1;
            r = -1;
            return true;
        }
        
        f = (f+1)%v.size();
        return true;
        
    }
    
    int Front() {
        
        if(f == -1)
            return f;
        
        return v[f];
        
    }
    
    int Rear() {
        if(r == -1)
            return -1;
        
        return v[r];
    }
    
    bool isEmpty() {
        
        if(f == -1)
            return true;
        else
            return false;
        
    }
    
    bool isFull() {
        
        if(f == -1)
            return false;
        
        if((r+1) % v.size() == f)
            return true;
        
        return false;
        
    }
};

5. Reveal cards Increasing order

class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
        queue<int>q;
        vector<int>t(deck.size());
        sort(deck.begin(),deck.end());
        for(int i=0;i<deck.size();i++)
        {
            q.push(i);
        }
        for(int i=0;i<deck.size();i++)
        {
            if(!q.empty())
            {
                t[q.front()]=deck[i];
                q.pop();
                q.push(q.front());
                q.pop();
            }
        } 
        return t;
    }
};
