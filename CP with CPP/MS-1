ARRAYS:
1. Remove Duplicates from Sorted Array

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.size() == 0) 
            return 0;
        
        int i = 0;
        
        for (int j = 1; j < nums.size(); j++) {
            if (nums[j] != nums[i]) {
                i++;
                nums[i] = nums[j];
            }
        }
        
        return i + 1;
    }
};

2. Best Time to Buy and Sell Stock II

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int n = prices.size();
        int diff = 0;
        for(int i=1;i<n;++i)
        {
            if(prices[i] > prices[i-1])
                diff += prices[i]-prices[i-1];
        }
        return diff;
    }
};
3. Rotate Array

class Solution {
public:
    void reverse(vector<int> &num, int low, int high){
        while(low<high){
            swap(num[low],num[high]);
            low++;
            high--;
        }
    }
    void rotate(vector<int>& nums, int k) {
      int n=(int)nums.size()  ;
        k=k%n;
        reverse(nums,0,n-k-1);
        reverse(nums,n-k,n-1);
        reverse(nums,0,n-1);
    }
};
4. Contains Duplicate
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int,int> countMap;
        for(int i=0;i<nums.size();i++){
            if(countMap[nums[i]]){
                
            
            return true;
        }
        countMap[nums[i]]++;
    }
    return false;
    }
};
5. Single Number
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int n = (int)nums.size();
        int a=0;
        for(int i=0;i<n;i++){
            a ^=nums[i];
        }
        return a;
    }
};

STRINGS:
1. Reverse String
class Solution {
public:
    void reverseString(vector<char>& s) {
        int left=0;
        int right=s.size()-1;
        while(left<right){
            char tmp=s[left];
            s[left++]=s[right];
            s[right--]=tmp;
        }
    }
};
2. First Unique Character in a String
class Solution {
public:
    int firstUniqChar(string s) {
        vector <int>f(26);
        int n=s.size();
        for(auto i: s) f[i-'a']++;
        for(int i=0;i<n;i++){
            if(f[s[i]-'a']==1)return i;
        }
        return -1;
    }
};
3. Valid Anagram
class Solution {
public:
    bool isAnagram(string s, string t) {
int freqs[26]={0},freqt[26]={0};
        for (char ch:s) freqs[ch-'a']++;
        for (char ch:t) freqt[ch-'a']++;
for(int i=0;i<26;i++)
    if(freqs[i]!=freqt[i]) 
        return false;
    return true;
        
        
    }
};
4. Valid Palindrome
class Solution {
public:
    bool isPalindrome(string s) {
        if(s.length() <=1) return true;
        int st=0, en=s.length()-1;
        while(st<en){
            while(st<en && !isalnum(s[st]))st++;
            while(st<en && !isalnum(s[en]))en--;
            if(st<en && tolower(s[st])!=tolower(s[en])) return false;
            st++;
            en--;
        }
        return true;
    }
};
5. String to Integer (atoi)
class Solution {
    public :
    int myAtoi(string s) {
        if(s.length()==0) return 0;

        int i=0;
         while(i<s.size() && s[i]== ' ') {
             i++;
         }     
        s = s.substr(i); //i ---> last of string
        
        int sign = +1;
        long ans = 0;
        
        if(s[0] == '-') sign = -1;
        
        int MAX = INT_MAX, MIN = INT_MIN;
        i = (s[0] == '+' || s[0] == '-') ? 1 : 0;
		
        while(i < s.length()) {
            if(s[0] == ' ' || !isdigit(s[i])) break;
            
            ans = ans * 10 + s[i]-'0';
            if(sign == -1 && -1*ans < MIN) return MIN;
            if(sign == 1 && ans > MAX) return MAX;
            
            i++;
        }
        
        return (int)(sign*ans);
    }
};

